.\" Man page generated from reStructuredText.
.
.TH "NODOGSPLASH" "1" "Apr 10, 2020" "5.0.0" "NoDogSplash"
.SH NAME
nodogsplash \- nodogsplash Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Nodogspash is a high performance, small footprint Captive Portal,
offering by default a simple splash page restricted Internet connection, yet incorporates an API that allows the creation of sophisticated authentication applications.
.sp
It was derived originally from the codebase of the Wifi Guard Dog project.
.sp
Nodogsplash is released under the GNU General Public License.
.INDENT 0.0
.IP \(bu 2
Mailing List: \fI\%http://ml.ninux.org/mailman/listinfo/nodogsplash\fP
.IP \(bu 2
Original Homepage \fIdown\fP: \fI\%http://kokoro.ucsd.edu/nodogsplash\fP
.IP \(bu 2
Wifidog: \fI\%http://dev.wifidog.org/\fP
.IP \(bu 2
GNU GPL: \fI\%http://www.gnu.org/copyleft/gpl.html\fP
.UNINDENT
.sp
The following describes what Nodogsplash does, how to get it and run it, and
how to customize its behavior for your application.
.sp
Contents:
.SH OVERVIEW
.sp
\fBNoDogSplash\fP (NDS) is a high performance, small footprint Captive Portal, offering a simple splash page restricted Internet connection.
.sp
The alternate openNDS package provides a powerful API for developing custom Captive portal login pages ranging from a simple user login through to sophisticated multi site systems.
Details of openNDS can be found at:
\fI\%https://opennds.readthedocs.io\fP
.SS Captive Portal Detection (CPD)
.INDENT 0.0
.INDENT 3.5
All modern mobile devices, most desktop operating systems and most browsers now have a CPD process that automatically issues a port 80 request on connection to a network. NDS detects this and serves a special "\fBsplash\fP" web page to the connecting client device.
.UNINDENT
.UNINDENT
.SS Provide simple and immediate public Internet access
.INDENT 0.0
.INDENT 3.5
NDS provides a simple templated splash page.
.sp
This splash page provides basic notification and a simple click/tap to continue button.
.INDENT 0.0
.INDENT 3.5
Customising the page seen by users is a simple matter of editing the respective html.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH INSTALLING NODOGSPLASH
.SS OpenWrt
.INDENT 0.0
.IP \(bu 2
Have a router working with OpenWrt. At the time of writing, Nodogsplash has been tested with OpenWrt 18.06.x, 19.7.x and Snapshot.
.IP \(bu 2
It may or may not work on older versions of OpenWrt or on other kinds of Linux\-based router firmware.
.IP \(bu 2
Make sure your router is basically working before you try to install  NoDogSplash. In particular, make sure your DHCP daemon is serving addresses on the interface that NoDogSplash will manage.
.sp
The default is br\-lan but can be changed to any interface by editing the /etc/config/nodogsplash file.
.IP \(bu 2
To install Nodogsplash, you may use the OpenWrt Luci web interface or alternatively, ssh to your router and run the command:
.INDENT 2.0
.INDENT 3.5
\fBopkg update\fP
.UNINDENT
.UNINDENT
.sp
followed by
.INDENT 2.0
.INDENT 3.5
\fBopkg install nodogsplash\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
NoDogSplash is enabled by default and will start automatically on reboot or can be started and stopped manually.
.IP \(bu 2
If the interface that you want NoDogSplash to manage is not br\-lan,
edit /etc/config/nodogsplash and set GatewayInterface.
.IP \(bu 2
To start NoDogSplash, run the following, or just reboot the router:
.INDENT 2.0
.INDENT 3.5
\fBservice nodogsplash start\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To test the installation, connect a client device to the interface on your router that is managed by NoDogSplash (for example, connect to the router\(aqs wireless lan).
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Most client device operating systems and browsers support Captive Portal Detection (CPD) and the operating system or browser on that device will attempt to contact a pre defined port 80 web page.
.sp
CPD will trigger NoDogSplash to serve the default splash page where you can click or tap Continue to access the Internet.
.sp
See the Authentication section for details of setting up a proper authentication process.
.sp
If your client device does not display the splash page it most likely does not support CPD.
.sp
You should then manually trigger NoDogSplash by trying to access a port 80 web site (for example, google.com:80 is a good choice).
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
To stop NoDogSplash:
.INDENT 2.0
.INDENT 3.5
\fBservice nodogsplash stop\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To uninstall NoDogSplash:
.INDENT 2.0
.INDENT 3.5
\fBopkg remove nodogsplash\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS Debian
.sp
There isn\(aqt a package in the repository (yet). But we have support for a Debian package.
.sp
Requirements beside Debian tools are:
.INDENT 0.0
.IP \(bu 2
libmicrohttpd\-dev (>= 0.9.51) [avaiable in \fBstretch\fP]
.UNINDENT
.sp
But you can also compile libmicrohttpd your self if you\(aqre still running jessie or older.
.sp
To compile NoDogSplash and create the Debian package, see the chapter "How to Compile NoDogSplash".
.SH HOW NODOGSPLASH (NDS) WORKS
.sp
NoDogSplash is a Captive Portal Engine. Any Captive Portal, including NDS, will have two main components:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Something that does the capturing, and
.IP \(bu 2
Something to provide a Portal for client users to log in.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
NoDogSplash MUST run on a device configured as an IPv4 router.
.sp
A wireless router will typically be running OpenWrt or some other Linux distribution.
.sp
A router, by definition, will have two or more interfaces, at least one to connect to the wide area network (WAN) or Internet feed, and at least one connecting to the local area network (LAN).
.sp
Each LAN interface must also act as the Default IP Gateway for its LAN, ideally with the interface serving IP addresses to client devices using DHCP.
.sp
Multiple LAN interfaces can be combined into a single bridge interface. For example, ethernet, 2.4Ghz and 5Ghz networks are typically combined into a single bridge interface. Logical interface names will be assigned such as eth0, wlan0, wlan1 etc. with the combined bridge interface named as br\-lan.
.sp
NDS will manage one or more of them of them. This will typically be br\-lan, the bridge to both the wireless and wired LAN, but could be, for example, wlan0 if you wanted NDS to work just on the wireless interface.
.SS Summary of Operation
.sp
By default, NDS blocks everything, but intercepts port 80 requests.
.sp
An initial port 80 request will be generated on a client device, usually automatically by the client device\(aqs built in Captive Portal Detection (CPD), or possibly by the user manually browsing to an http web page.
.sp
This request will of course \fBbe routed by the client device to the Default Gateway\fP of the local network. The Default Gateway will, as we have seen, be the router interface that NDS is managing.
.SS The Thing That Does the Capturing (NDS)
.INDENT 0.0
.INDENT 3.5
As soon as this initial port 80 request is received on the default gateway interface, NDS will "Capture" it, make a note of the client device identity, allocate a unique token for the client device, then redirect the client browser to the Portal component of NDS.
.UNINDENT
.UNINDENT
.SS The Thing That Provides the Portal (the Splash page)
.INDENT 0.0
.INDENT 3.5
The client browser is redirected to the Portal component. This is a web service that is configured to know how to communicate with the core engine of NDS.
.sp
This is commonly known as the Splash Page.
.sp
NDS has its own web server built in and this is used to serve the Portal "Splash" page to the client browser.
.sp
NDS comes with a standard Splash Page pre\-installed.
.sp
This is a trivial Click to Continue splash page with template variables.
.sp
Once the user on the client device has successfully completed the splash page actions, that page then links directly back to NDS.
.sp
For security, NDS expects to receive the same valid token it allocated when the client issued its initial port 80 request. If the token received is valid, NDS then "authenticates" the client device, allowing access to the Internet.
.UNINDENT
.UNINDENT
.SS Captive Portal Detection (CPD)
.sp
All modern mobile devices, most desktop operating systems and most browsers now have a CPD process that automatically issues a port 80 request on connection to a network. NDS detects this and serves a special “splash” web page to the connecting client device.
.sp
The port 80 html request made by the client CPD can be one of many vendor specific URLs.
.INDENT 0.0
.INDENT 3.5
Typical CPD URLs used are, for example:
.INDENT 0.0
.IP \(bu 2
\fIhttp://captive.apple.com/hotspot\-detect.html\fP
.IP \(bu 2
\fIhttp://connectivitycheck.gstatic.com/generate_204\fP
.IP \(bu 2
\fIhttp://connectivitycheck.platform.hicloud.com/generate_204\fP
.IP \(bu 2
\fIhttp://www.samsung.com/\fP
.IP \(bu 2
\fIhttp://detectportal.firefox.com/success.txt\fP
.IP \(bu 2
Plus many more
.UNINDENT
.UNINDENT
.UNINDENT
.sp
It is important to remember that CPD is designed primarily for mobile devices to automatically detect the presence of a portal and to trigger the login page, without having to resort to breaking SSL/TLS security by requiring the portal to redirect port 443 for example.
.sp
Just about all current CPD implementations work very well but some compromises are necessary depending on the application.
.sp
The vast majority of devices attaching to a typical Captive Portal are mobile devices. CPD works well giving the initial login page.
.sp
For a typical guest wifi, eg a coffee shop, bar, club, hotel etc., a device connects, the Internet is accessed for a while, then the user takes the device out of range.
.sp
When taken out of range, a typical mobile device begins periodically polling the wireless spectrum for SSIDs that it knows about to try to obtain a connection again, subject to timeouts to preserve battery life.
.sp
Most Captive Portals have a session duration limit (NDS included).
.sp
If a previously logged in device returns to within the coverage of the portal, the previously used SSID is recognised and CPD is triggered and tests for an Internet connection in the normal way. Within the session duration limit of the portal, the Internet connection will be established, if the session has expired, the splash page will be displayed again.
.sp
Early mobile device implementations of CPD used to poll their detection URL at regular intervals, typically around 30 to 300 seconds. This would trigger the Portal splash page quite quickly if the device stayed in range and the session limit had been reached.
.sp
However it was very quickly realised that this polling kept the WiFi on the device enabled continuously having a very negative effect on battery life, so this polling whilst connected was either increased to a very long interval or removed all together (depending on vendor) to preserve battery charge. As most mobile devices come and go into and out of range, this is not an issue.
.sp
A common issue raised is:
.sp
\fIMy devices show the splash page when they first connect, but when the authorization expires, they just announce there is no internet connection. I have to make them "forget" the wireless network to see the splash page again. Is this how is it supposed to work?\fP
.sp
The workaround is as described in the issue, or even just manually disconnecting or turning WiFi off and on will simulate a "going out of range", initialising an immediate trigger of the CPD. One or any combination of these workarounds should work, again depending on the particular vendor\(aqs implementation of CPD.
.sp
In contrast, most laptop/desktop operating systems, and browser versions for these still implement CPD polling whilst online as battery considerations are not so important.
.sp
For example, Gnome desktop has its own built in CPD browser with a default interval of 300 seconds. Firefox also defaults to something like 300 seconds. Windows 10 is similar.
.sp
This IS how it is supposed to work, but does involve some compromises.
.sp
The best solution is to set the session timeout to a value greater than the expected length of time a client device is likely to be present. Experience shows a limit of 24 hours covers most situations eg bars, clubs, coffee shops, motels etc. If for example an hotel has guests regularly staying for a few days, then increase the session timeout as required.
.SS Packet filtering
.sp
Nodogsplash considers four kinds of packets coming into the router over the managed interface. Each packet is one of these kinds:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fBBlocked\fP, if the MAC mechanism is block, and the source MAC address of the packet matches one listed in the BlockedMACList; or if the MAC mechanism is allow, and source MAC address of the packet does not match one listed in the AllowedMACList or the TrustedMACList. These packets are dropped.
.IP 2. 3
\fBTrusted\fP, if the source MAC address of the packet matches one listed in the TrustedMACList. By default, these packets are accepted and routed to all destination addresses and ports. If desired, this behavior can be customized by FirewallRuleSet trusted\-users and FirewallRuleSet trusted\-users\-to\-router lists in the nodogsplash.conf configuration file, or by the EmptyRuleSetPolicy trusted\-users EmptyRuleSetPolicy trusted\-users\-to\-router directives.
.IP 3. 3
\fBAuthenticated\fP, if the packet\(aqs IP and MAC source addresses have gone through the nodogsplash authentication process and has not yet expired. These packets are accepted and routed to a limited set of addresses and ports (see FirewallRuleSet authenticated\-users and FirewallRuleSet users\-to\-router in the nodogsplash.conf configuration file).
.IP 4. 3
\fBPreauthenticated\fP\&. Any other packet. These packets are accepted and routed to a limited set of addresses and ports (see FirewallRuleSet      preauthenticated\-users and FirewallRuleSet users\-to\-router in the nodogsplash.conf configuration file). Any other packet is dropped, except that a packet for destination port 80 at any address is redirected to port 2050 on the router, where nodogsplash\(aqs built in libhttpd\-based web server is listening. This begins the \(aqauthentication\(aq process. The server will serve a splash page back to the source IP address of the packet. The user clicking the appropriate link on the splash page will complete the process, causing future packets from this IP/MAC address to be marked as Authenticated until the inactive or forced timeout is reached, and its packets revert to being Preauthenticated.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
NoDogSplash implements these actions by inserting rules in the router\(aqs iptables mangle PREROUTING chain to mark packets, and by inserting rules in the nat PREROUTING, filter INPUT and filter FORWARD chains which match on those marks.
.sp
Because it inserts its rules at the beginning of existing chains, NoDogSplash should be insensitive to most typical existing firewall configurations.
.SS Traffic control
.sp
Data rate control on an IP connection basis can be achieved using Smart Queue Management (SQM) configured separately, with NDS being fully compatible.
.sp
It should be noted that while setup options and BinAuth do accept traffic/quota settings, these values currently have no effect and are reserved for future development.
.SH THE SPLASH PAGE
.sp
As you will see mentioned in the "How Nodogsplash (NDS) Works" section, an initial port 80 request is generated on a client device, either by the user manually browsing to an http web page, or, more usually, automatically by the client device\(aqs built in Captive Portal Detection (CPD).
.sp
This request is intercepted by NDS and an html Splash Page is served to the user of the client device to enable them to authenticate and obtain Internet access.
.SS The NoDogSplash Templated Splash Page
.INDENT 0.0
.INDENT 3.5
The splash page generated from the basic splash.html file installed with NDS includes Template Variables (as listed in the splash.html file).
.UNINDENT
.UNINDENT
.SH TRAFFIC CONTROL
.SS Overview
.sp
Nodogsplash (NDS) supports Traffic Control (Bandwidth Limiting) using the SQM \- Smart Queue Management (sqm\-scripts) package, available for OpenWrt and generic Linux.
.sp
\fI\%https://github.com/tohojo/sqm\-scripts\fP
.sp
SQM does efficient bandwidth control, independently for both upload and download, on an IP connection basis. This ideal for enforcing a fair usage policy on a typical Captive Portal implementation.
.sp
In addition the Queue management SQM provides, results in significantly improved WiFi performance, particularly on the modern low cost WiFi routers available on the market today.
.sp
Finally, SQM controls quality of service (QOS), allowing priority for real time protocols such a VOIP.
.sp
Overall, SQM can enhance significantly the experience of clients using your Captive Portal, whilst ensuring a single client is unlikely to dominate the available Internet service at the expense of others.
.SS Installing SQM
.sp
The generic Linux scripts can be downloaded from the link above.
.sp
\fBOn OpenWrt\fP, SQM can be installed from the LuCi interface or by the following CLI commands on your router:
.sp
\fIopkg update\fP
.sp
\fIopkg install sqm\-scripts\fP
.sp
\fBNote\fP:
The standard and default SQM installation expects monitoring of the interface connecting to the WAN. What we need is for SQM to monitor the interface NDS is bound to. This of course will be a LAN interface.
The default configuration will limit bandwidth from the WAN connection to services on the Internet. Our configuration will limit client bandwidth TO NDS, thus enabling a true fair usage policy.
.sp
\fITo prevent confusion\fP it is important to understand that SQM defines "Upload" as traffic "Out" of the interface SQM is monitoring and "Download" as traffic "In" to the SQM interface.
.sp
In the default SQM configuration, Upload will mean what is normally accepted, ie traffic to the Internet and Download will mean traffic from the Internet.
.sp
\fBIn our case however the terms will be reversed!\fP
.sp
The default SQM configuration file on OpenWrt is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
config queue
    option enabled \(aq0\(aq
    option interface \(aqeth1\(aq
    option download \(aq85000\(aq
    option upload \(aq10000\(aq
    option qdisc \(aqfq_codel\(aq
    option script \(aqsimple.qos\(aq
    option qdisc_advanced \(aq0
    option ingress_ecn \(aqECN\(aq
    option egress_ecn \(aqECN\(aq
    option qdisc_really_really_advanced \(aq0\(aq
    option itarget \(aqauto\(aq
    option etarget \(aqauto\(aq
    option linklayer \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For simple rate limiting, we are interested in setting the desired interface and the download/upload rates.
.sp
We may also want to optimize for the type of Internet feed and change the qdisc.
.sp
A typical Internet feed could range from a high speed fiber optic connection through fast VDSL to a fairly poor ADSL connection and configured rates should be carefully chosen when setting up your Captive Portal.
.sp
A typical Captive Portal however will be providing free Internet access to customers and guests at a business or venue, using their mobile devices.
.sp
A good compromise for a business or venue might be a download rate from the Internet of ~3000 Kb/s and an upload rate to the Internet of ~1000 Kb/s will be adequate, allowing for example, a client to stream a YouTube video, yet have minimal effect on other clients browsing the Internet or downloading their emails. Obviously the values for upload and download rates for best overall performance depend on many factors and are best determined by trial and error.
.sp
If we assume we have NDS bound to interface br\-lan and we have a VDSL connection, a good working setup for SQM will be as follows:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIRate to\fP Internet 1000 Kb/s (but note this is from the perspective of the interface SQM is monitoring, so this means DOWNLOAD from the client).
.IP \(bu 2
\fIRate from\fP Internet 3000 Kb/s (also note this is from the perspective of the interface SQM is monitoring, so is means UPLOAD to the client).
.IP \(bu 2
\fIVDSL\fP connection (usually an ethernet like connection)
.IP \(bu 2
\fINDS\fP bound to br\-lan
.UNINDENT
.UNINDENT
.UNINDENT
.sp
We will configure this by issuing the following commands:
.sp
\fINote the reversed "upload" and "download" values.\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci set sqm.@queue[0].interface=\(aqbr\-lan\(aq

uci set sqm.@queue[0].download=\(aq1000\(aq

uci set sqm.@queue[0].upload=\(aq3000\(aq

uci set sqm.@queue[0].linklayer=\(aqethernet\(aq

uci set sqm.@queue[0].overhead=\(aq22\(aq

uci set sqm.@queue[0].qdisc=\(aqcake\(aq

uci set sqm.@queue[0].script=\(aqpiece_of_cake.qos\(aq

uci set sqm.@queue[0].enabled=\(aq1\(aq

uci commit sqm

service sqm restart
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Replace the linklayer and overhead values to match your Internet feed.
.sp
The following table lists LinkLayer types and Overhead for common feed types:
.INDENT 0.0
.INDENT 3.5
.TS
center;
|l|l|l|.
_
T{
Connection Type
T}	T{
LinkLayer
T}	T{
Overhead
T}
_
T{
Fibre/Cable
T}	T{
Ethernet
T}	T{
18
T}
_
T{
VDSL2
T}	T{
Ethernet
T}	T{
22
T}
_
T{
Ethernet
T}	T{
Ethernet
T}	T{
38
T}
_
T{
ADSL/DSL
T}	T{
ATM
T}	T{
44
T}
_
.TE
.UNINDENT
.UNINDENT
.sp
Some broadband providers use variations on the values shown here, contacting them for details sometimes helps but often the request will be "off script" for a typical helpdesk. These table values should give good results regardless. Trial and error and the use of a good speed tester is often the only way forward.
A good speed tester web site is \fI\%http://dslreports.com/speedtest\fP
.sp
Further details about SQM can be found at the following links:
.sp
\fI\%https://openwrt.org/docs/guide\-user/network/traffic\-shaping/sqm\fP
.sp
\fI\%https://openwrt.org/docs/guide\-user/network/traffic\-shaping/sqm\-details\fP
.SH USING NDSCTL
.sp
A nodogsplash install includes ndsctl, a separate application which provides some control over a running nodogsplash process by communicating with it over a unix socket. Some command line options:
.INDENT 0.0
.IP \(bu 2
To print to stdout some information about your nodogsplash process:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl status\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To print to stdout the list of clients in human readable format:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl clients\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To print to stdout the list of clients and trusted devices in json format:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl json\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To print to stdout the details of a particular client in json format (This is particularly useful if called from a FAS or Binauth script.):
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl json [mac|ip|token]\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To block a MAC address, when the MAC mechanism is block:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl block MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To unblock a MAC address, when the MAC mechanism is block:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl unblock MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To allow a MAC address, when the MAC mechanism is allow:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl allow MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To unallow a MAC address, when the MAC mechanism is allow:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl unallow MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To deauthenticate a currently authenticated user given their IP or MAC
address:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl deauth IP|MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To set the verbosity of logged messages to n:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl debuglevel n\fP
.UNINDENT
.UNINDENT
.INDENT 2.0
.IP \(bu 2
debuglevel 0 : Silent (only LOG_ERR and LOG_EMERG messages will be seen, otherwise there will be no logging.)
.IP \(bu 2
debuglevel 1 : LOG_ERR, LOG_EMERG, LOG_WARNING and LOG_NOTICE (this is the default level).
.IP \(bu 2
debuglevel 2 : debuglevel 1 + LOG_INFO
.IP \(bu 2
debuglevel 3 : debuglevel 2 + LOG_DEBUG
.UNINDENT
.sp
All other levels are undefined and will result in debug level 3 being set.
.UNINDENT
.sp
For more options, run ndsctl \-h. (Note that if you want the effect of ndsctl commands to to persist across nodogsplash restarts, you have to edit the configuration file.)
.SH CUSTOMISING NODOGSPLASH
.sp
After initial installation, NoDogSplash (NDS) should be working in its most basic mode and client Captive Portal Detection (CPD) should pop up the default splash page.
.sp
Before attempting to customise NDS you should ensure it is working in this basic mode before you start.
.sp
NDS reads its configuration file when it starts up but the location of this file varies depending on the operating system.
.sp
As NDS is a package that requires hardware configured as an IP router, perhaps the most common installation is using OpenWrt. However NDS can be compiled to run on most Linux distributions, the most common being Debian or one of its popular variants (eg Raspbian).
.sp
If NDS is working in the default, post installation mode, then you will have met the NDS dependencies and can now move on to your own customisation.
.SS Rules for Customised Splash Pages
.sp
It should be noted when designing a custom splash page that for security reasons many client device CPD implementations:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Immediately close the browser when the client has authenticated.
.IP \(bu 2
Prohibit the use of href links.
.IP \(bu 2
Prohibit downloading of external files (including .css and .js, even if they are allowed in NDS firewall settings).
.IP \(bu 2
Prohibit the execution of javascript.
.UNINDENT
.UNINDENT
.UNINDENT
.SS The Configuration File
.sp
In OpenWrt, or operating systems supporting UCI (such as LEDE) the configuration is kept in the file:
.INDENT 0.0
.INDENT 3.5
\fB/etc/config/nodogsplash\fP
.UNINDENT
.UNINDENT
.sp
In other operating systems the configuration is kept in the file:
.INDENT 0.0
.INDENT 3.5
\fB/etc/nodogsplash/nodogsplash.conf\fP
.UNINDENT
.UNINDENT
.sp
Both of these files contain a full list of options and can be edited directly. A restart of NDS is required for any changes to take effect.
.sp
In the case of OpenWrt though, once you are confident in your configuration requirements you can use UCI to read and set any of the configuration options using simple commands, making this very convenient if making changes from scripts, such as those you may write to use with Binauth and FAS.
.sp
For example, to list the full configuration, at the command line type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci show nodogsplash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To display the Gateway Name, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci get nodogsplash.@nodogsplash[0].gatewayname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To set the Gateway Name to a new value, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci set nodogsplash.@nodogsplash[0].gatewayname=\(aqmy new gateway\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To add a new firewall rule allowing access to another service running on port 8888 on the router, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci add_list nodogsplash.@nodogsplash[0].users_to_router=\(aqallow
tcp port 8888\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally you must tell UCI to commit your changes to the configuration file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci commit nodogsplash
.ft P
.fi
.UNINDENT
.UNINDENT
.SS The Click and Go Splash Page
.sp
NoDogSplash provides a simple templated click and go splash page.
This can be found at:
.INDENT 0.0
.INDENT 3.5
\fB/etc/nodogsplash/htdocs/splash.html\fP
.UNINDENT
.UNINDENT
.sp
When the splash page is served, the following variables in the page are
replaced by their values:
.INDENT 0.0
.IP \(bu 2
\fI$gatewayname\fP The value of GatewayName as set in nodogsplash.conf.
.IP \(bu 2
\fI$authtarget\fP A URL which encodes a unique token and the URL of the user\(aqs   original web request. If nodogsplash receives a request at this URL, it completes the authentication process for the client and replies to the request with a "302 Found" to the encoded originally requested URL.
.sp
It should be noted however that, depending on vendor, the client\(aqs built in CPD may not respond to simple html links.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
An href link example that my prove to be problematical:
.INDENT 0.0
.INDENT 3.5
\fB<a href="$authtarget">Enter</a>\fP
.UNINDENT
.UNINDENT
.sp
(You should instead use a GET\-method HTML form to send this   information to the nodogsplash server; see below.)
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fI$tok\fP, \fI$redir\fP, \fI$authaction\fP, and \fI$denyaction\fP are available and should be used to write the splash page to use a GET\-method HTML form instead of using $authtarget as the value of an href attribute to communicate with the nodogsplash server.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
\fI$authaction\fP and \fI$denyaction\fP are virtual urls used to inform NDS that a client should be authenticated or deauthenticated and are of the form:
.sp
\fIhttp://gatewayaddress:gatewayport/nodogsplash_auth/\fP
.sp
and
.sp
\fIhttp://gatewayaddress:gatewayport/nodogsplash_deny/\fP
.sp
A simple example of a GET\-method form:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<form method=\(aqGET\(aq action=\(aq$authaction\(aq>
  <input type=\(aqhidden\(aq name=\(aqtok\(aq value=\(aq$tok\(aq>
  <input type=\(aqhidden\(aq name=\(aqredir\(aq value=\(aq$redir\(aq>
  <input type=\(aqsubmit\(aq value=\(aqClick Here to Enter\(aq>
</form>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fI$clientip\fP, \fI$clientmac\fP and \fI$gatewaymac\fP The respective addresses
of the client or gateway. This might be useful in cases where the data
needs to be forwarded to some other place by the splash page itself.
.IP \(bu 2
\fI$nclients\fP and \fI$maxclients\fP User stats. Useful when you need to
display something like "n of m users online" on the splash site.
.IP \(bu 2
\fI$uptime\fP The time Nodogsplash has been running.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
A list of all available variables are included in the splash.html file.
.sp
If the user accesses the virtual url \fI$authaction\fP when already authenticated, a status page is shown:
.sp
\fB/etc/nodogsplash/htdocs/status.html\fP
.sp
In the status.html file, the same variables as in the splash.html site can be used.
.UNINDENT
.UNINDENT
.sp
It should be noted when designing a custom splash page that for security reasons many client device CPD implementations:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Immediately close the browser when the client has authenticated.
.IP \(bu 2
Prohibit the use of href links.
.IP \(bu 2
Prohibit downloading of external files (including .css and .js, even if they are allowed in NDS firewall settings).
.IP \(bu 2
Prohibit the execution of javascript.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Also, note that any images you reference should reside in the subdirectory /etc/nodogsplash/htdocs/images/.
.SS Dynamic Splash Pages
.sp
From version 5.0.0 onwards, dynamic splash pages are supported by the openNDS package. See:
\fI\%https://github.com/openNDS/openNDS\fP
.SH FREQUENTLY ASKED QUESTIONS
.SS Can I update from v0.9/v1/v2/v3/v4 to v5?
.sp
You can, if:
.INDENT 0.0
.IP \(bu 2
You only want a simple templated splash page
.IP \(bu 2
You have iptables v1.4.21 or above
.UNINDENT
.sp
\fBFrom version 5.0.0 onwards\fP, NoDogSplash is optimised for minimum non volatile storage (flash) and RAM requirements.
.sp
The advanced API support provided by BinAuth, Preauth and FAS have been moved to the \fBopenNDS\fP package:
\fI\%https://opennds.readthedocs.io\fP
.SS How do I use QoS or Traffic Control on OpenWrt?
.sp
The original pre version 1 feature has been broken since OpenWrt 12.09 (Attitude Adjustment), because the IMQ (Intermediate queueing device) is no longer supported.
.INDENT 0.0
.INDENT 3.5
\fBPull Requests are welcome!\fP
.sp
However the OpenWrt package, SQM Scripts (Smart Queue Management), is fully compatible with Nodogsplash and if configured to operate on the NoDogSplash interface (br\-lan by default) will provide efficient IP connection based traffic control to ensure fair usage of available bandwidth.
.UNINDENT
.UNINDENT
.SS Is https capture supported?
.sp
\fBNo\fP\&. Because all connections would have a critical certificate failure.
.INDENT 0.0
.INDENT 3.5
HTTPS web sites are now more or less a standard and to maintain security and user confidence it is essential that captive portals \fBDO NOT\fP attempt to capture port 443.
.UNINDENT
.UNINDENT
.SS What is CPD / Captive Portal Detection?
.sp
CPD (Captive Portal Detection) has evolved as an enhancement to the network manager component included with major Operating Systems (Linux, Android, iOS/macOS, Windows).
.INDENT 0.0
.INDENT 3.5
Using a pre\-defined port 80 web page (which one gets used depends on the vendor) the network manager will detect the presence of a captive portal hotspot and notify the user. In addition, most major browsers now support CPD.
.UNINDENT
.UNINDENT
.sp
\fBIt should be noted\fP when designing a custom splash page that for security reasons many client device CPD implementations:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Immediately close the browser when the client has authenticated.
.IP \(bu 2
Prohibit the use of href links.
.IP \(bu 2
Prohibit downloading of external files (including .css and .js, even if they are allowed in NDS firewall settings).
.IP \(bu 2
Prohibit the execution of javascript.
.UNINDENT
.UNINDENT
.UNINDENT
.SH HOW TO COMPILE NODOGSPLASH
.SS Linux/Unix
.sp
The Libmicrohttpd library is a dependency of NoDogSplash so you must first iInstall libmicrohttpd including the header files (often called \-dev package). Then proceed to download the NoDogSplash source files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git clone https://github.com/nodogsplash/nodogsplash.git
cd nodogsplash
make
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you installed the libmicrohttpd to another location (e.g. /tmp/libmicrohttpd_install/)
replace path in the make call with
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make CFLAGS="\-I/tmp/libmicrohttpd_install/include" LDFLAGS="\-L/tmp/libmicrohttpd_install/lib"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After compiling you can call \fBmake install\fP to install NoDogSplash to /usr/
.SS Making a Package for Installation
.SS OpenWrt Package
.sp
To compile NoDogSplash and create its installable package, please use the package definition from the feeds package.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git clone git://git.openwrt.org/trunk/openwrt.git
cd openwrt
\&./scripts/feeds update
\&./scripts/feeds install
\&./scripts/feeds install nodogsplash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Select the appropriate "Target System" and "Target Profile" in the menuconfig menu and build the image.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make defconfig
make menuconfig
make
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Debian Package
.sp
First you must compile NoDogSplash as described above for Linux/Unix.
Then run the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make deb
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEBUGGING NODOGSPLASH
.SS Syslog Logging
.sp
NoDogSplash supports four levels of debugging to syslog.
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
debuglevel 0 : Silent (only LOG_ERR and LOG_EMERG messages will be seen, otherwise there will be no logging.)
.IP \(bu 2
debuglevel 1 : LOG_ERR, LOG_EMERG, LOG_WARNING and LOG_NOTICE (this is the default level).
.IP \(bu 2
debuglevel 2 : debuglevel 1 + LOG_INFO
.IP \(bu 2
debuglevel 3 : debuglevel 2 + LOG_DEBUG
.UNINDENT
.sp
All other levels are undefined and will result in debug level 3 being set.
.UNINDENT
.UNINDENT
.sp
To see maximally verbose debugging output from NoDogSplash, set log level to 3. This can be done in the UCI configuration file on OpenWrt adding the line:
.INDENT 0.0
.INDENT 3.5
\fBoption debuglevel \(aq3\(aq\fP
.UNINDENT
.UNINDENT
.sp
Restart or reboot. Debug messages are logged to syslog. You can view messages with the logread command.
.sp
The default level of logging is 1, and is more appropriate for routine use.
.sp
Logging level can also be set using ndsctl.
.UNINDENT
.UNINDENT
.SS Firewall Cleanup
.INDENT 0.0
.INDENT 3.5
When stopped, NoDogSplash deletes its iptables rules, attempting to leave the router\(aqs firewall in its original state. If not (for example, if NoDogSplash crashes instead of exiting cleanly) subsequently starting and stopping NoDogSplash should remove its rules.
.sp
On OpenWrt, restarting the firewall will overwrite NoDogSplash\(aqs iptables rules, so when the firewall is restarted it will automatically restart NoDogSplash if it is running.
.UNINDENT
.UNINDENT
.SS Packet Marking
.INDENT 0.0
.INDENT 3.5
NoDogSplash operates by marking packets. Many packages, such as mwan3 and SQM scripts, also mark packets.
.sp
By default, NoDogSplash marks its packets in such a way that conflicts are unlikely to occur but the masks used by NoDogSplash can be changed if necessary in the configuration file.
.UNINDENT
.UNINDENT
.SS IPtables Conflicts
.INDENT 0.0
.INDENT 3.5
Potential conflicts may be investigated by looking at your overall iptables setup. To list all the rules in all the chains, run
.INDENT 0.0
.INDENT 3.5
\fBiptables \-L\fP
.UNINDENT
.UNINDENT
.sp
For extensive suggestions on debugging iptables, see for example, Oskar Andreasson\(aqs tutorial at:
.sp
\fI\%https://www.frozentux.net/iptables\-tutorial/iptables\-tutorial.html\fP
.UNINDENT
.UNINDENT
.SH TODO LIST
.sp
Not all features are finished or working as properly or as efficiently as they should. Other features have not been thought of yet!
.sp
Features should be aimed at providing tools to allow NDS to be used as flexible Captive Portal engine, rather than building in specific solutions.
.sp
Here is a list of things that need to be improved:
.INDENT 0.0
.IP \(bu 2
While (un\-) block/trust/allow via the ndsctl tool take effect, the state object of the client in NDS is not affected.
.sp
Both systems still need to be connected (in src/auth.c).
.IP \(bu 2
Include blocked and trusted clients in the client list \- so that they can be managed.
.IP \(bu 2
Extend Status processing to display a page when a user\(aqs authentication is rejected, e.g. because the user exceeded a quota or is blocked etc.
.IP \(bu 2
Implement Traffic control on a user by user basis. This functionality was originally available but has been broken for many years.
.IP \(bu 2
The code in src/http_microhttpd.c has evolved from previous versions and possibly has some missed edge cases. It would benefit from a rewrite to improve maintainability as well as performance.
.IP \(bu 2
ip version 6 is not currently supported by NDS. It is not essential or advantageous to have in the short term but should be added at some time in the future.
.IP \(bu 2
Automatic Offline mode. Either for forced offline use, or automatic detection of a failed Internet feed could be implemented. Some thought and discussion has been put into this and it is quite possible to achieve.
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
The Nodogsplash Contributors
.SH COPYRIGHT
2016 - 2020, The Nodogsplash Contributors
.\" Generated by docutils manpage writer.
.
